import numpy as np
from .utils import normalize

def map(map, absolute_values=True, normalize=True, reverse_order=True, axis=1, mode='R'):
    """
    Parse a .mat file generated by angle sweep script in Lumerical into x, y and z components.

    Parameters
    ----------
    map: File
        A file descriptor or File object generated by hdf5.
    absolute_values: bool
        If set to True, the absolute values of z component are returned.
    normalize: bool
        If set to True, the z component is normalized.
    reverse_order: bool
        If set to True, the order of elements in z component is reversed along the given axis.
    axis: int
        The axis along wich the z component is reversed.
    mode: str
        Toggles the data representation mode between reflection and absorption. Note: T is ignored.

    Returns
    -------
    ndarray
        x, y and z components from the .mat data.
    """
    
    x, y, z = map.get('lum/x'), map.get('lum/y'), map.get('lum/z')

    if absolute_values is True:
        z = np.absolute(z)

    if normalize is True:
        z = normalize(z)

    if reverse_order is True:
        z = np.flip(z, axis)

    match mode:
        case 'R':
            z = np.array(z)
        case 'A':
            z = 1 - np.array(z)
        case _:
            return -1

    return np.array(x), np.array(y), z

def single_rta(file):
    # Initialize empty lists to store wavelength and spectral data
    wavelength_R, data_R = [], []
    wavelength_T, data_T = [], []
    wavelength_A, data_A = [], []

    # Track which data type we are currently processing
    current_data = None

    # Open and read the file
    with open(file, "r") as file:
        for line in file:
            # Ignore empty lines
            if line.strip() == "":
                current_data = None  # Reset data type on empty lines
                continue
            
            # Check for the header line and assign current_data
            if "wavelength" in line:
                if "R" in line:
                    current_data = (wavelength_R, data_R)
                elif "T" in line:
                    current_data = (wavelength_T, data_T)
                elif "A" in line:
                    current_data = (wavelength_A, data_A)
                continue
            
            # Parse data lines
            if current_data is not None:
                values = line.strip().split(",")
                wavelength_value, data_value = float(values[0]), float(values[1])

                # Append to current data arrays
                current_data[0].append(wavelength_value)
                current_data[1].append(data_value)

    # Convert lists to numpy arrays and stack to create 2xn arrays
    R = np.array([wavelength_R, data_R])
    T = np.array([wavelength_T, data_T])
    A = np.array([wavelength_A, data_A])

    return R, T, A